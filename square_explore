#imports python libraries
import pygame
import math
import pygame_menu

#Initialise PyGame



#Blank Screen
SCREEN_H = 720
SCREEN_W = 960
PLAYER_HEIGHT = 40
size = (SCREEN_W,SCREEN_H)
sizelvl3 = (1440,720)
screen = pygame.display.set_mode(size)




#Title of new window/screen
pygame.display.set_caption("Square Explore")

#Exit gae flap set to false
done = False

pygame.init()

#Global Constants

#Colours
BLACK = (0,0,0)
WHITE = (255,255,255)
BLUE = (50,50,255)
YELLOW = (255,255,0)
GOLD = (255,215,0)
RED = (255,0,0)
GREY = (150,150,150)

#player skins
blue_w_border = pygame.image.load('blue_w_border.png').convert_alpha()
blue_w_border = pygame.transform.scale(blue_w_border, (40,40))

purple_w_border = pygame.image.load('purple_w_border.png').convert_alpha()
purple_w_border = pygame.transform.scale(purple_w_border, (40,40))

gold_w_border = pygame.image.load('gold_w_border.png').convert_alpha()
gold_w_border = pygame.transform.scale(gold_w_border, (40,40))

kanyewest_skin = pygame.image.load('kanyewest_skin.png').convert_alpha()
kanyewest_skin = pygame.transform.scale(kanyewest_skin, (40,40))

creeper_skin = pygame.image.load('creeper_skin.png').convert_alpha()
creeper_skin = pygame.transform.scale(creeper_skin, (40,40))

skeleton_skin = pygame.image.load('skeleton_skin.png').convert_alpha()
skeleton_skin = pygame.transform.scale(skeleton_skin, (40,40))

zombie_skin = pygame.image.load('zombie_skin.png').convert_alpha()
zombie_skin = pygame.transform.scale(zombie_skin, (40,40))

walterwhite_skin = pygame.image.load('walterwhite_skin.png').convert_alpha()
walterwhite_skin = pygame.transform.scale(walterwhite_skin, (40,40))

therock_skin = pygame.image.load('therock_skin.png').convert_alpha()
therock_skin = pygame.transform.scale(therock_skin, (40,40))

spike_skin = pygame.image.load('spike_skin.png').convert_alpha()
spike_skin = pygame.transform.scale(spike_skin, (40,40))

enemy_skin = pygame.image.load('enemy_skin.png').convert_alpha()
enemy_skin = pygame.transform.scale(enemy_skin, (40,40))




#text fonts
font = pygame.font.SysFont(None, 25)
l_c_m_font = pygame.font.SysFont(None, 50)
title_font = pygame.font.SysFont('malgungothic', 100, bold = True)

lvl_txt_font = pygame.font.SysFont('malgungothic', 30)
lvl_title_font = pygame.font.SysFont('malgungothic', 30, bold = True)

help_txt_font = pygame.font.SysFont('malgungothic', 12, bold = True)
help_txt_font_L = pygame.font.SysFont('malgungothic', 20, bold = True)


#level titles splash screen creation
lvl1_txt = lvl_txt_font.render('LEVEL 1', True, WHITE)
lvl2_txt = lvl_txt_font.render('LEVEL 2', True, WHITE)
lvl3_txt = lvl_txt_font.render('LEVEL 3', True, WHITE)

skinsshop_txt = lvl_txt_font.render('SKINS', True, WHITE)

#tutorial texts
help_txt = help_txt_font.render('jump to start', True, WHITE)
help_txt_skins = help_txt_font.render('jump for', True, WHITE)

tutorial_txt = help_txt_font_L.render('use arrow keys to move side to side and jump', True, WHITE)

exit_txt = help_txt_font.render('press 0 to return to home screen', True, WHITE)

return_home_text = help_txt_font_L.render('Home Screen', True, GREY)

#screen title texts
ms_game_title = title_font.render('SQUARE EXPLORE', True, BLUE)

lvl1_title = lvl_title_font.render('LEVEL 1', True, BLUE)
lvl2_title = lvl_title_font.render('LEVEL 2', True, BLUE)
lvl3_title = lvl_title_font.render('LEVEL 3', True, BLUE)

skins_menu_title = title_font.render('SKINS', True, BLUE)

#game lost text
lose_txt = title_font.render('YOU LOST', True, RED)

retry_text = help_txt_font_L.render('exit and try again...', True, RED)



#Icons for objects
Heart_icon = pygame.image.load('hearticon.png').convert_alpha()
Heart_icon = pygame.transform.scale(Heart_icon, (70,35))

Spikes_icon = pygame.image.load('spikeicon.png').convert_alpha()
Spikes_icon = pygame.transform.scale(Spikes_icon, (40,40))

Enemy_icon = pygame.image.load('enemyicon.png').convert_alpha()
Enemy_icon = pygame.transform.scale(Enemy_icon, (20,20))

Block_texture_level1 = pygame.image.load('blocktexturelevel1.png').convert_alpha()
Block_texture_level1 = pygame.transform.scale(Block_texture_level1, (40,40))

Block_texture_skinsmenu = pygame.image.load('skinsmenublock.jpg').convert_alpha()
Block_texture_skinsmenu = pygame.transform.scale(Block_texture_skinsmenu, (40,40))

Background_level1 = pygame.image.load('backgroundimageL1.jpg').convert_alpha()
Background_level1 = pygame.transform.scale(Background_level1, (960,720))

Background_level2 = pygame.image.load('backgroundimageL2.jpg').convert_alpha()
Background_level2 = pygame.transform.scale(Background_level2, (960,720))

Background_level3 = pygame.image.load('backgroundimageL3.jpg').convert_alpha()
Background_level3 = pygame.transform.scale(Background_level3, (1440,720))


#level 3 icons
Spikes_icon_3 = pygame.transform.scale(Spikes_icon, (20,20))

Enemy_icon_3 = pygame.transform.scale(Enemy_icon, (15,15))

Block_texture_3 = pygame.transform.scale(Block_texture_level1, (20,20))






Background_skins_menu1 = pygame.image.load('skinsmenu1.png').convert_alpha()
Background_skins_menu1 = pygame.transform.scale(Background_skins_menu1, (2000, 720))

Background_skins_menu2 = pygame.image.load('skinsmenu2.png').convert_alpha()
Background_skins_menu2 = pygame.transform.scale(Background_skins_menu2, (2010, 720))


Coin_icon = pygame.image.load('coinicon.png').convert_alpha()
Coin_icon = pygame.transform.scale(Coin_icon, (30,30))

Coin_icon_mini = pygame.image.load('coinicon.png').convert_alpha()
Coin_icon_mini = pygame.transform.scale(Coin_icon, (20,20))

s_s_lvl1g = pygame.image.load('lvl1ssgradient.png').convert_alpha()
s_s_lvl1g = pygame.transform.scale(s_s_lvl1g, (250,720))

s_s_lvl2g = pygame.image.load('lvl2ssgradient.png').convert_alpha()
s_s_lvl2g = pygame.transform.scale(s_s_lvl2g, (250,720))

s_s_lvl3g = pygame.image.load('lvl3ssgradient.jpg').convert_alpha()
s_s_lvl3g = pygame.transform.scale(s_s_lvl3g, (250,720))

s_s_skinsg = pygame.image.load('skinssgradient.png').convert_alpha()
s_s_skinsg = pygame.transform.scale(s_s_skinsg, (160,720))



#map list for blocks
splash_screen_list =[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], # =24 columns, # = 18 rows
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]


map_1_list=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], # =24 columns, # = 18 rows
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],
            [0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0],
            [1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0],
            [1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1]]


map_2_list =[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], # =24 columns, # = 18 rows
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
            [0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0],
            [0,0,0,1,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0],
            [1,0,0,1,0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0],
            [0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,1],
            [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
            [0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0],
            [1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1],
            [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
            [0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0]]


map_3_list =[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], # =36 columns, =  18rows
            [0,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],
            [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1],
            [0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1],
            [0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0],
            [1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]



skins_menu_list =[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], # =24 columns, # = 18 rows
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
            [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]


#list of locations for static enemies
static_enemy_location_list_x = [520, 560, 520, 560, 920, 920, 360]
static_enemy_location_list_y = [560, 560, 480, 480, 560, 520, 120]

s_enemy_location_list_x_2 = [320, 360, 400, 560, 600, 920, 920, 720, 320, 360, 400, 160, 400, 640]
s_enemy_location_list_y_2 = [680, 680, 680, 680, 680, 560, 520, 240, 320, 320, 320, 000, 000, 000]

s_enemy_location_list_x_3 = [560,600,640,680,720,760,800,840,880,920,960,1000,1040,1080,1120,1160,1200,1240,1280,1320,1360,1400,   120,160,240,280,   400,480,   1120,   200,240,280,600,640,680,720,0]
s_enemy_location_list_y_3 = [680,680,680,680,680,680,680,680,680,680,680,680, 680, 680, 680, 680, 680, 680, 680, 680, 680,  680,   560,560,520,520,   440,440,   360 ,   440,440,440,440,440,440,440,120]


#list of locations for horizontal moving enemies
h_enemy_location_list_x = [280,   750,   530, 330, 430]
h_enemy_location_list_y = [450,   690,   260, 260, 400]



#list of locations for vertical moving enemies
v_enemy_location_list_x = [680,   10, 940,   750, 1120, 980]
v_enemy_location_list_y = [20,    20, 200,   180,   20, 380]



#list of locations for coins
coins_location_list_x = [85, 885, 325,   5, 445]
coins_location_list_y = [85, 565, 445, 365, 125]

coins_location_list_x_2 = [165, 925,   5, 285, 885, 325]
coins_location_list_y_2 = [325, 685, 365, 205, 165, 645]

coins_location_list_x_3 = [0,  40, 0,  40, 805, 1405, 325, 365, 525, 565, 965, 685]
coins_location_list_y_3 = [440,440,480,480,325, 405 , 380, 380, 380, 380, 605, 45]



lives_num = 5

coinsNum = 0

currentSkin = blue_w_border









#CLASSES::::





#create class for player
class Player(pygame.sprite.Sprite):
    def __init__(self, skin, player_name):
        super().__init__()
        self.name = player_name
        self.image = currentSkin
        self.rect = self.image.get_rect()
        self.rect.x = 10
        self.rect.y = 680
        self.speed_x = 0
        self.speed_y = 0
        self.isJump = False
        self.vel = 5
        self.jumpCount = 8
        


    def set_skin(self, newskin):
        skin = newskin
        self.image = skin

    def get_skin(self):
        return self.image

        

    def update(self):
        global screen_change

        global game

            

        size = (1440,SCREEN_H)

        keys = pygame.key.get_pressed()

        if self.speed_y <= 6:    
            self.speed_y += 0.75
            if self.rect.y > SCREEN_H and self.speed_y >= 0:
                self.speed_y = 0


        if keys[pygame.K_1]:
            screen_change = 'lvl1'

        if keys[pygame.K_LEFT] and self.rect.x > 0: 
            self.rect.x -= self.vel
        #records right key presses
        if keys[pygame.K_RIGHT] and self.rect.x < size[0] - self.vel - PLAYER_HEIGHT:  
            self.rect.x += self.vel
        #the jumping loop
        if not(self.isJump): #checks if attribute 'isJump' is false, making sure the player is not already jumping

            if keys[pygame.K_DOWN] and self.rect.y < SCREEN_H - PLAYER_HEIGHT - self.vel:
                self.rect.y += self.vel
            #if the UP key is pressed, isJump is set to true, and the player begins the jump
            if keys[pygame.K_UP]:
                self.isJump = True
        else: #where the jump happens
            if self.jumpCount >= -9: #quadratic path
                self.rect.y -= (self.jumpCount * abs(self.jumpCount)) * 0.35 #changing of the y coordinate of the player
                self.jumpCount -= 0.3
            else: 
                self.jumpCount = 8
                self.isJump = False # resets isJump to False so the player can't jump again

        

        #checks player is within boundaries                                 
        if (self.rect.x >= 0) and (self.rect.x <= size[0] - PLAYER_HEIGHT):
            #adds speed value to coordinate
            self.rect.x += self.speed_x
        elif (self.rect.x < 0):
            #else keeps player within boundaries
            self.rect.x = 0
        elif (self.rect.x > size[0] - PLAYER_HEIGHT):
            self.rect.x = (size[0] - PLAYER_HEIGHT)
        #checks y boundaries
        if (self.rect.y <= SCREEN_H - PLAYER_HEIGHT):
            self.rect.y += self.speed_y
        elif (self.rect.y > SCREEN_H - PLAYER_HEIGHT):
            self.rect.y = SCREEN_H - PLAYER_HEIGHT
            self.speed_y = 0

            #stop hitting the wall
        



#create static enemy class
class Enemies(pygame.sprite.Sprite):
    def __init__(self, color, xpos, ypos):
        super().__init__()
        self.background = color
        self.image = (Spikes_icon)
        self.rect = self.image.get_rect()
        self.rect.x = xpos
        self.rect.y = ypos



#create vertical enemy class from previous enemy class
class Vertical_moving_enemies(Enemies):
    def __init__(self, color, xpos, ypos, speed, travel_ypos):
        super().__init__(color, xpos, ypos)
        self.background = color
        self.image = Enemy_icon
        self.rect = self.image.get_rect()
        self.rect.x = xpos
        self.rect.y = ypos
        self.original_y = ypos
        self.limit_y = travel_ypos
        self.enemy_speed = speed

        self.speed_y = 0


    def update(self):
        for i in range(len(v_enemy_location_list_x)):
            if self.rect.y == (self.original_y):
                self.enemy_speed = 1
            if self.rect.y == (self.original_y + 80):
                self.enemy_speed = -1

        
        self.rect.y += self.enemy_speed
    
#create horizontal enemy moving class
class Horizontal_moving_enemies(Enemies):
    def __init__(self, color, xpos, ypos, speed, travel_xpos):
        super().__init__(color, xpos, ypos)
        self.background = color
        self.image = Enemy_icon
        self.rect = self.image.get_rect()
        self.rect.x = xpos
        self.rect.y = ypos
        self.original_x = xpos
        self.limit_x = travel_xpos
        self.enemy_speed = speed

        self.speed_x = 0

    def update(self):
        for i in range(len(h_enemy_location_list_x)):
            if self.rect.x == (self.original_x - 20):
                self.enemy_speed = 1
            if self.rect.x == (self.original_x + 60):
                self.enemy_speed = -1

        
        self.rect.x += self.enemy_speed



#class to show lives
class Lives(pygame.sprite.Sprite):
    def __init__(self, x_ref, y_ref):
        super().__init__()
        self.image = Heart_icon
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref


        


#map class
class Maps(pygame.sprite.Sprite):
    def __init__(self, x_ref, y_ref, skin):
        super().__init__()
        self.image = skin #sets skin for blocks to image reference
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref


#CREATE COIN CLASS
class Coins(pygame.sprite.Sprite):
    def __init__(self, x_ref, y_ref):
        super().__init__()
        self.image = Coin_icon
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref
        

#CREATE COIN COUNT CLASS
class Coins_display(pygame.sprite.Sprite):
    def __init__(self, x_ref, y_ref):
        super().__init__()
        self.image = Coin_icon_mini
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref
        


#class for the finish flag on levels
class Finish_Flag(pygame.sprite.Sprite):
    def __init__(self, color, width, height, x_ref, y_ref):
        super().__init__()
        self.image = pygame.Surface([width,height])
        self.image.fill(color)
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref



#class for splash screen
class Splash_Screen():
    def __init__(self):

        
        #Manages how fast screen refreshes
        self.clock = pygame.time.Clock()

        #create group of background images
        self.background_group = pygame.sprite.Group()

        #creates a group of player(s)
        self.player_group = pygame.sprite.Group()

        #create group of enemies
        self.enemies_group = pygame.sprite.Group()

        #create group of lives
        self.lives_list = pygame.sprite.Group()

        #create display of number of coins
        self.coin_display_list = pygame.sprite.Group()

        #create a list for the map walls
        self.wall_list = pygame.sprite.Group()

        #create a list of all sprites
        self.all_sprites_group = pygame.sprite.Group()
        
        #create player 1
        self.player_1 = Player(blue_w_border, "Player 1")
        self.player_group.add(self.player_1)
        self.all_sprites_group.add(self.player_1)        

        global lives_num

        
        

        #create lives object
        for z in range(700, 700 +((lives_num)*30), 30):
            heart = Lives(z, 5)
            self.lives_list.add(heart)
            self.all_sprites_group.add(heart)


        #create display of coin count
        coin_count = Coins_display(20, 20)
        self.coin_display_list.add(coin_count)
        self.all_sprites_group.add(coin_count)



                    
    def logic(self):
        
        global screen_change

        global coinsNum

        global lives_num

        keys = pygame.key.get_pressed()

        screen = pygame.display.set_mode(size)

        if keys[pygame.K_3]:
            if coinsNum >= 3 and lives_num <=6:
                coinsNum -=3
                lives_num += 1

        


        #clock ticker
        self.clock.tick(60)
        #drawing on the splash screen
        screen.fill (BLACK)

        #draw areas on the home screen to different levels
        screen.blit(s_s_lvl1g, (50,0))
        screen.blit(s_s_lvl2g, (300,0))
        screen.blit(s_s_lvl3g, (550,0))
        screen.blit(s_s_skinsg, (800,0))

        

        screen.blit(skinsshop_txt, (835, 80))



        if self.player_1.rect.x < 50:
            #blits help message in the level area if within the area
            screen.blit(tutorial_txt, (68, 450))
            #level number blitting
            screen.blit(lvl1_txt, (125, 80))
            screen.blit(lvl2_txt, (375, 80))
            screen.blit(lvl3_txt, (625, 80))


        #changing levels based on area on splash screen
        if self.player_1.rect.x >= 50 and self.player_1.rect.x < 300:
            #blits help message in the level area if within the area
            screen.blit(help_txt, (80, 93))
            #level number blitting
            screen.blit(lvl1_txt, (170, 80))
            screen.blit(lvl2_txt, (375, 80))
            screen.blit(lvl3_txt, (625, 80))
            if keys[pygame.K_UP]:
                screen_change = 'lvl1'
                
        
        if self.player_1.rect.x >= 300 and self.player_1.rect.x < 550:
            #blits help message in the level area if within the area
            screen.blit(help_txt, (330, 93))
            #level number blitting
            screen.blit(lvl1_txt, (125, 80))
            screen.blit(lvl2_txt, (420, 80))
            screen.blit(lvl3_txt, (625, 80))
            if keys[pygame.K_UP]:
                screen_change = 'lvl2'

        if self.player_1.rect.x >= 550 and self.player_1.rect.x < 800:
            #blits help message in the level area if within the area
            screen.blit(help_txt, (580, 93))
            #level number blitting
            screen.blit(lvl1_txt, (125, 80))
            screen.blit(lvl2_txt, (375, 80))
            screen.blit(lvl3_txt, (670, 80))
            if keys[pygame.K_UP]:
                screen_change = 'lvl3'

        if self.player_1.rect.x >= 800:
            screen.blit(help_txt_skins, (850, 70))
            #level number blitting
            screen.blit(lvl1_txt, (125, 80))
            screen.blit(lvl2_txt, (375, 80))
            screen.blit(lvl3_txt, (625, 80))
            if keys[pygame.K_UP]:
                screen_change = 'skins'
            


        

        #updates moving sprites
        self.all_sprites_group.update()
        self.all_sprites_group.draw (screen)


        

        #draws title on splash screen
        screen.blit(ms_game_title, (SCREEN_W/15, 300)) 

        #draws number of coins
        coin_num = font.render(str(coinsNum), True, WHITE)
        screen.blit(coin_num, (SCREEN_W/20,23))


        #lose function, displays message then exits game
        if lives_num <0:
            loop = 300
            while loop > 1:
                screen.blit(lose_txt, (250, 80))
                loop -=1

        #flip display to reveal new postion of objects (refreshes screen)
        pygame.display.flip()
        




#level 1 class
class Game():
    def __init__(self):
        
        self.level_complete = 0

        self.isJump = False
        self.jumpCount = 8
        self.vel = 5

        

        #Manages how fast screen refreshes
        self.clock = pygame.time.Clock()

        #create group of background images
        self.background_group = pygame.sprite.Group()

        #creates a group of player(s)
        self.player_group = pygame.sprite.Group()

        #create moving enemies groups
        self.v_enemies_group = pygame.sprite.Group()

        self.h_enemies_group = pygame.sprite.Group()

        #create group of enemies
        self.enemies_group = pygame.sprite.Group()

        #create finish flag group
        self.finish_group = pygame.sprite.Group()

        #create group of lives
        self.lives_list = pygame.sprite.Group()

        #create list of coins
        self.coins_group = pygame.sprite.Group()

        #create display of number of coins
        self.coin_display_list = pygame.sprite.Group()

        #create a list for the map walls
        self.wall_list = pygame.sprite.Group()

        #create a list of all sprites
        self.all_sprites_group = pygame.sprite.Group()
        
        #create player 1
        self.player_1 = Player(blue_w_border, "Player 1")
        self.player_group.add(self.player_1)
        self.all_sprites_group.add(self.player_1)        

        global lives_num


        #create still enemies
        for i in range(len(static_enemy_location_list_x)):
            static_enemy = Enemies(RED, static_enemy_location_list_x[i], static_enemy_location_list_y[i])
            #add enemies into sprite groups
            self.enemies_group.add(static_enemy)
            self.all_sprites_group.add(static_enemy)


        #create enemies which move vertically
        for i in range(1):
            self.v_moving_enemy = Vertical_moving_enemies(GREY, v_enemy_location_list_x[i], v_enemy_location_list_y[i], 1, 550)
            self.v_enemies_group.add(self.v_moving_enemy)
            self.enemies_group.add(self.v_moving_enemy)
            self.all_sprites_group.add(self.v_moving_enemy)

        #create enemies which move horizontally
        for i in range(1):
            self.h_moving_enemy = Horizontal_moving_enemies(GREY, h_enemy_location_list_x[i], h_enemy_location_list_y[i], 1, 550)
            self.h_enemies_group.add(self.h_moving_enemy)
            self.enemies_group.add(self.h_moving_enemy)
            self.all_sprites_group.add(self.h_moving_enemy)


        #create finish flag object
        finish = Finish_Flag(GOLD, 40, 80, 900, 40)
        self.finish_group.add(finish)
        self.all_sprites_group.add(finish)

        #create lives object
        for z in range(700, 700 +((lives_num)*30), 30):
            heart = Lives(z, 5)
            self.lives_list.add(heart)
            self.all_sprites_group.add(heart)
        

        #create coin objects
        for i in range(len(coins_location_list_x)):
            coin = Coins(coins_location_list_x[i], coins_location_list_y[i])
            self.coins_group.add(coin)
            self.all_sprites_group.add(coin)

        #create display of coin count
        coin_count = Coins_display(20, 20)
        self.coin_display_list.add(coin_count)
        self.all_sprites_group.add(coin_count)

         


    #  init_map
        #create map

        for y in range(18):
            for x in range(24):
                if map_1_list[y][x] == 1:
                    my_wall = Maps(x*40, y*40, Block_texture_level1)
                    self.wall_list.add(my_wall)
                    self.all_sprites_group.add(my_wall)


    def logic(self):

        global screen_change
        global lives_num
        global coinsNum

        

        keys = pygame.key.get_pressed()
        if keys[pygame.K_0]:
            screen_change = 'splashscreen'
            print('screen is returned to home screen')


        screen = pygame.display.set_mode(size)



    #  drawing and updating sprites
        screen.fill (BLACK)        
        self.clock.tick(60)
        screen.blit(Background_level1, (0,0))

        screen.blit(lvl1_title, (420, 30))

        #update and draw objects
        self.all_sprites_group.update()
        self.all_sprites_group.draw (screen)

        screen.blit(exit_txt, (383, 20))

        coin_num = font.render(str(coinsNum), True, WHITE)
        screen.blit(coin_num, (SCREEN_W/20,23))
        
        self.level_complete_mesg = l_c_m_font.render("LEVEL COMPLETE", True, WHITE) #create level complete font
        if self.level_complete > 0:
            screen.blit(self.level_complete_mesg, (SCREEN_W/3,340)) #blits message onto screen
            self.level_complete -= 1 #creates short time for it to be shown
            if self.level_complete == 1:
                screen_change = 'splashscreen'

        

        #lose function, displays message then exits game
        if lives_num <0:
            screen_change = 'losescreen'
            

        #flip display to reveal new postion of objects (refreshes screen)
        pygame.display.flip()
        #clock ticks over
        



        #checks for collision player and wall
        wall_hit_list = pygame.sprite.spritecollide(self.player_1, self.wall_list, False)
        for collision in wall_hit_list:
            #sets player speed to 0
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            self.player_1.rect.x = self.player_1_old_x
            self.player_1.rect.y = self.player_1_old_y
        #resets player coordinates to last location
        self.player_1_old_x = self.player_1.rect.x
        self.player_1_old_y = self.player_1.rect.y

        
        #checks collisions player and static and moving enemies
        s_enemy_hit_list = pygame.sprite.spritecollide(self.player_1, self.enemies_group, False)
        for collision in s_enemy_hit_list:
            #sets player speed to 0
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            #resets coordinates to startic coordinate
            self.player_1.rect.x = 10
            self.player_1.rect.y = 680
            print(lives_num)
            #takes away a life
            lives_num -= 1

            print(lives_num)

        
        #check collision player and coin
        coin_hit_list = pygame.sprite.spritecollide(self.player_1, self.coins_group, True)
        for collision in coin_hit_list:
            #adds one to coin coint
            coinsNum = coinsNum + 1
            
        
        #check collision player and finish line
        flag_hit_list = pygame.sprite.spritecollide(self.player_1, self.finish_group, False)
        for collision in flag_hit_list:
            #adds 5 to coin count
            coinsNum = coinsNum + 5
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            #resets player to start coordinates
            self.player_1.rect.x = 10
            self.player_1.rect.y = 680
            #sets the timer variable for displaying level complete message
            self.level_complete = 200
            



#level 2 class
class Game_2():
    def __init__(self):
        
        self.level_complete = 0

        self.isJump = False
        self.jumpCount = 8
        self.vel = 5

        

        #Manages how fast screen refreshes
        self.clock = pygame.time.Clock()

        #create group of background images
        self.background_group = pygame.sprite.Group()

        #creates a group of player(s)
        self.player_group = pygame.sprite.Group()

        #create moving enemies groups
        self.v_enemies_group = pygame.sprite.Group()

        self.h_enemies_group = pygame.sprite.Group()

        #create group of enemies
        self.enemies_group = pygame.sprite.Group()

        #create finish flag group
        self.finish_group = pygame.sprite.Group()

        #create group of lives
        self.lives_list = pygame.sprite.Group()

        #create list of coins
        self.coins_group = pygame.sprite.Group()

        #create display of number of coins
        self.coin_display_list = pygame.sprite.Group()

        #create a list for the map walls
        self.wall_list = pygame.sprite.Group()

        #create a list of all sprites
        self.all_sprites_group = pygame.sprite.Group()
        
        #create player 1
        self.player_1 = Player(blue_w_border, "Player 1")
        self.player_group.add(self.player_1)
        self.all_sprites_group.add(self.player_1)        

        global lives_num

        #create still enemies
        for i in range(len(s_enemy_location_list_x_2)):
            static_enemy = Enemies(RED, s_enemy_location_list_x_2[i], s_enemy_location_list_y_2[i])
            #add enemies into sprite groups
            self.enemies_group.add(static_enemy)
            self.all_sprites_group.add(static_enemy)


        #create enemies which move vertically
        for i in range(1,3):
            self.v_moving_enemy = Vertical_moving_enemies(GREY, v_enemy_location_list_x[i], v_enemy_location_list_y[i], 1, 550)
            self.v_enemies_group.add(self.v_moving_enemy)
            self.enemies_group.add(self.v_moving_enemy)
            self.all_sprites_group.add(self.v_moving_enemy)

        #create enemies which move horizontally
        for i in range(1,2):
            self.h_moving_enemy = Horizontal_moving_enemies(GREY, h_enemy_location_list_x[i], h_enemy_location_list_y[i], 1, 550)
            self.h_enemies_group.add(self.h_moving_enemy)
            self.enemies_group.add(self.h_moving_enemy)
            self.all_sprites_group.add(self.h_moving_enemy)


        #create finish flag object
        finish = Finish_Flag(GOLD, 40, 80, 900, 40)
        self.finish_group.add(finish)
        self.all_sprites_group.add(finish)

        #create lives object
        for z in range(700, 700 +((lives_num)*30), 30):
            heart = Lives(z, 5)
            self.lives_list.add(heart)
            self.all_sprites_group.add(heart)

        #create coin objects
        for i in range(len(coins_location_list_x_2)):
            coin = Coins(coins_location_list_x_2[i], coins_location_list_y_2[i])
            self.coins_group.add(coin)
            self.all_sprites_group.add(coin)

        #create display of coin count
        coin_count = Coins_display(20, 20)
        self.coin_display_list.add(coin_count)
        self.all_sprites_group.add(coin_count)

         


    #  init_map
        #create map

        for y in range(18):
            for x in range(24):
                if map_2_list[y][x] == 1:
                    my_wall = Maps(x*40, y*40, Block_texture_level1)
                    self.wall_list.add(my_wall)
                    self.all_sprites_group.add(my_wall)


    def logic(self):

        screen = pygame.display.set_mode(size)

        global screen_change
        global lives_num
        global coinsNum

        keys = pygame.key.get_pressed()
        if keys[pygame.K_0]:
            screen_change = 'splashscreen'


        



    #  drawing and updating sprites
        screen.fill (BLACK)        
        self.clock.tick(60)
        screen.blit(Background_level2, (0,0))

        screen.blit(lvl2_title, (420, 90))

        
        self.all_sprites_group.update()
        #draw here
        self.all_sprites_group.draw (screen)

        
        screen.blit(exit_txt, (383, 80))

        coin_num = font.render(str(coinsNum), True, WHITE)
        screen.blit(coin_num, (SCREEN_W/20,23))
        
        self.level_complete_mesg = l_c_m_font.render("LEVEL COMPLETE", True, WHITE) #create level complete font
        if self.level_complete > 0:
            screen.blit(self.level_complete_mesg, (SCREEN_W/3,340)) #blits message onto screen
            self.level_complete -= 1 #creates short time for it to be shown
            if self.level_complete == 1:
                screen_change = 'splashscreen'
        

        

        #lose function, displays message then exits game
        if lives_num <0:
            screen_change = 'losescreen'
            

        #flip display to reveal new postion of objects (refreshes screen)
        pygame.display.flip()
        #clock ticks over
        




        #checks for collision player and wall
        wall_hit_list = pygame.sprite.spritecollide(self.player_1, self.wall_list, False)
        for collision in wall_hit_list:
            #sets player speed to 0
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            self.player_1.rect.x = self.player_1_old_x
            self.player_1.rect.y = self.player_1_old_y
        #resets player coordinates to last location
        self.player_1_old_x = self.player_1.rect.x
        self.player_1_old_y = self.player_1.rect.y

        
        #checks collisions player and static and moving enemies
        s_enemy_hit_list = pygame.sprite.spritecollide(self.player_1, self.enemies_group, False)
        for collision in s_enemy_hit_list:
            #sets player speed to 0
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            #resets coordinates to startic coordinate
            self.player_1.rect.x = 10
            self.player_1.rect.y = 680
            print(lives_num)
            #takes away a life
            lives_num = lives_num - 1

            print(lives_num)

        
        #check collision player and coin
        coin_hit_list = pygame.sprite.spritecollide(self.player_1, self.coins_group, True)
        for collision in coin_hit_list:
            #adds one to coin coint
            coinsNum = coinsNum + 1
            
        
        #check collision player and finish line
        flag_hit_list = pygame.sprite.spritecollide(self.player_1, self.finish_group, False)
        for collision in flag_hit_list:
            #adds 5 to coin count
            coinsNum = coinsNum + 5
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            #resets player to start coordinates
            self.player_1.rect.x = 10
            self.player_1.rect.y = 680
            #sets the timer variable for displaying level complete message
            self.level_complete = 200
            

class Game_3():
    def __init__(self):
        
        self.level_complete = 0

        self.isJump = False
        self.jumpCount = 8
        self.vel = 5

        

        #Manages how fast screen refreshes
        self.clock = pygame.time.Clock()

        #create group of background images
        self.background_group = pygame.sprite.Group()

        #creates a group of player(s)
        self.player_group = pygame.sprite.Group()

        #create moving enemies groups
        self.v_enemies_group = pygame.sprite.Group()

        self.h_enemies_group = pygame.sprite.Group()

        #create group of enemies
        self.enemies_group = pygame.sprite.Group()

        #create finish flag group
        self.finish_group = pygame.sprite.Group()

        #create group of lives
        self.lives_list = pygame.sprite.Group()

        #create list of coins
        self.coins_group = pygame.sprite.Group()

        #create display of number of coins
        self.coin_display_list = pygame.sprite.Group()

        #create a list for the map walls
        self.wall_list = pygame.sprite.Group()

        #create a list of all sprites
        self.all_sprites_group = pygame.sprite.Group()
        
        #create player 1
        self.player_1 = Player(blue_w_border, "Player 1")
        
        self.player_group.add(self.player_1)
        self.all_sprites_group.add(self.player_1)        

        global lives_num


        #create still enemies
        for i in range(len(s_enemy_location_list_x_3)):
            static_enemy = Enemies(RED, s_enemy_location_list_x_3[i], s_enemy_location_list_y_3[i])
            #add enemies into sprite groups
            self.enemies_group.add(static_enemy)
            self.all_sprites_group.add(static_enemy)


        #create enemies which move vertically
        for i in range(3,6):
            self.v_moving_enemy = Vertical_moving_enemies(GREY, v_enemy_location_list_x[i], v_enemy_location_list_y[i], 1, 550)
            self.v_enemies_group.add(self.v_moving_enemy)
            self.enemies_group.add(self.v_moving_enemy)
            self.all_sprites_group.add(self.v_moving_enemy)

        #create enemies which move horizontally
        for i in range(2,5):
            self.h_moving_enemy = Horizontal_moving_enemies(GREY, h_enemy_location_list_x[i], h_enemy_location_list_y[i], 1, 550)
            self.h_enemies_group.add(self.h_moving_enemy)
            self.enemies_group.add(self.h_moving_enemy)
            self.all_sprites_group.add(self.h_moving_enemy)


        #create finish flag object
        finish = Finish_Flag(GOLD, 40, 80, 1340, 40)
        self.finish_group.add(finish)
        self.all_sprites_group.add(finish)

        #create lives object
        for z in range(700, 700 +((lives_num)*30), 30):
            heart = Lives(z, 5)
            self.lives_list.add(heart)
            self.all_sprites_group.add(heart)

        #create coin objects
        for i in range(len(coins_location_list_x_3)):
            coin = Coins(coins_location_list_x_3[i], coins_location_list_y_3[i])
            self.coins_group.add(coin)
            self.all_sprites_group.add(coin)

        #create display of coin count
        coin_count = Coins_display(20, 20)
        self.coin_display_list.add(coin_count)
        self.all_sprites_group.add(coin_count)

         


    #  init_map
        #create map

        for y in range(18):
            for x in range(36):
                if map_3_list[y][x] == 1:
                    my_wall = Maps(x*40, y*40, Block_texture_level1)
                    self.wall_list.add(my_wall)
                    self.all_sprites_group.add(my_wall)


    def logic(self):

        SCREEN_W = 1440
        size = (SCREEN_W,SCREEN_H)
        screen = pygame.display.set_mode(size)

        global screen_change
        global lives_num
        global coinsNum

        keys = pygame.key.get_pressed()
        if keys[pygame.K_0]:
            screen_change = 'splashscreen'


        



    #  drawing and updating sprites
        screen.fill (BLACK)        
        self.clock.tick(60)
        screen.blit(Background_level3, (0,0))

        

        
        self.all_sprites_group.update()
        #draw here
        self.all_sprites_group.draw (screen)

        screen.blit(lvl3_title, (680, 90))
        screen.blit(exit_txt, (643, 80))

        coin_num = font.render(str(coinsNum), True, WHITE)
        screen.blit(coin_num, (SCREEN_W/20,23))
        
        self.level_complete_mesg = l_c_m_font.render("LEVEL COMPLETE", True, WHITE) #create level complete font
        if self.level_complete > 0:
            screen.blit(self.level_complete_mesg, (SCREEN_W/3,340)) #blits message onto screen
            self.level_complete -= 1 #creates short time for it to be shown
            if self.level_complete == 1:
                screen_change = 'splashscreen'
        

        

        #lose function, displays message then exits game
        if lives_num <0:
            screen_change = 'losescreen'
            

        #flip display to reveal new postion of objects (refreshes screen)
        pygame.display.flip()
        #clock ticks over
        



        
        #checks for collision player and wall
        wall_hit_list = pygame.sprite.spritecollide(self.player_1, self.wall_list, False)
        for collision in wall_hit_list:
            #sets player speed to 0
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            self.player_1.rect.x = self.player_1_old_x
            self.player_1.rect.y = self.player_1_old_y
        #resets player coordinates to last location
        self.player_1_old_x = self.player_1.rect.x
        self.player_1_old_y = self.player_1.rect.y

        
        #checks collisions player and static and moving enemies
        s_enemy_hit_list = pygame.sprite.spritecollide(self.player_1, self.enemies_group, False)
        for collision in s_enemy_hit_list:
            #sets player speed to 0
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            #resets coordinates to startic coordinate
            self.player_1.rect.x = 10
            self.player_1.rect.y = 680
            print(lives_num)
            #takes away a life
            lives_num = lives_num - 1

            print(lives_num)

        
        #check collision player and coin
        coin_hit_list = pygame.sprite.spritecollide(self.player_1, self.coins_group, True)
        for collision in coin_hit_list:
            #adds one to coin coint
            coinsNum = coinsNum + 1
            
        
        #check collision player and finish line
        flag_hit_list = pygame.sprite.spritecollide(self.player_1, self.finish_group, False)
        for collision in flag_hit_list:
            #adds 5 to coin count
            coinsNum = coinsNum + 5
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            #resets player to start coordinates
            self.player_1.rect.x = 10
            self.player_1.rect.y = 680
            #sets the timer variable for displaying level complete message
            self.level_complete = 200



class Skin_Screen():
    def __init__(self):

        self.img1_x = 0
        self.img2_x = 2000
        
        #Manages how fast screen refreshes
        self.clock = pygame.time.Clock()

        #create group of background images
        self.background_group = pygame.sprite.Group()

        #creates a group of player(s)
        self.player_group = pygame.sprite.Group()

        #create group of enemies
        self.enemies_group = pygame.sprite.Group()

        #create group of lives
        self.lives_list = pygame.sprite.Group()

        #create display of number of coins
        self.coin_display_list = pygame.sprite.Group()

        #create a list for the map walls
        self.wall_list = pygame.sprite.Group()

        #create finish flag group
        self.finish_group = pygame.sprite.Group()

        #create skin groups
        self.skin1_group = pygame.sprite.Group()
        self.skin2_group = pygame.sprite.Group()
        self.skin3_group = pygame.sprite.Group()
        self.skin4_group = pygame.sprite.Group()
        self.skin5_group = pygame.sprite.Group()
        self.skin6_group = pygame.sprite.Group()
        self.skin7_group = pygame.sprite.Group()
        self.skin8_group = pygame.sprite.Group()
        self.skin9_group = pygame.sprite.Group()
        self.skin10_group = pygame.sprite.Group()
        self.skin11_group = pygame.sprite.Group()


        #create a list of all sprites
        self.all_sprites_group = pygame.sprite.Group()
        
        #create player 1
        self.player_1 = Player(blue_w_border, "Player 1")
        self.player_group.add(self.player_1)
        self.all_sprites_group.add(self.player_1)        

        global lives_num
        

        #create lives object
        # for x in range(lives_num):
        for z in range(700, 700 +((lives_num)*30), 30):
            heart = Lives(z, 5)
            self.lives_list.add(heart)
            self.all_sprites_group.add(heart)


        #create display of coin count
        coin_count = Coins_display(20, 20)
        self.coin_display_list.add(coin_count)
        self.all_sprites_group.add(coin_count)

        #create finish flag object
        finish = Finish_Flag(GREY, 40, 80, 900, 640)
        self.finish_group.add(finish)
        self.all_sprites_group.add(finish)


        #create map
        for y in range(18):
            for x in range(24):
                if skins_menu_list[y][x] == 1:
                    my_wall = Maps(x*40, y*40, Block_texture_skinsmenu)
                    self.wall_list.add(my_wall)
                    self.all_sprites_group.add(my_wall)

        #creating skin blocks
        self.skin_1 = Maps(80, 600, blue_w_border)
        self.skin1_group.add(self.skin_1)
        self.all_sprites_group.add(self.skin_1)

        self.skin_2 = Maps(320, 600, purple_w_border)
        self.skin2_group.add(self.skin_2)
        self.all_sprites_group.add(self.skin_2)

        self.skin_3 = Maps(560, 600, gold_w_border)
        self.skin3_group.add(self.skin_3)
        self.all_sprites_group.add(self.skin_3)

        self.skin_4 = Maps(200, 440, creeper_skin)
        self.skin4_group.add(self.skin_4)
        self.all_sprites_group.add(self.skin_4)

        self.skin_5 = Maps(440, 440, skeleton_skin)
        self.skin5_group.add(self.skin_5)
        self.all_sprites_group.add(self.skin_5)

        self.skin_6 = Maps(680, 440, zombie_skin)
        self.skin6_group.add(self.skin_6)
        self.all_sprites_group.add(self.skin_6)

        self.skin_7 = Maps(80, 280, therock_skin)
        self.skin7_group.add(self.skin_7)
        self.all_sprites_group.add(self.skin_7)

        self.skin_8 = Maps(320, 280, kanyewest_skin)
        self.skin8_group.add(self.skin_8)
        self.all_sprites_group.add(self.skin_8)

        self.skin_9 = Maps(560, 280, walterwhite_skin)
        self.skin9_group.add(self.skin_9)
        self.all_sprites_group.add(self.skin_9)

        self.skin_10 = Maps(200, 120, spike_skin)
        self.skin10_group.add(self.skin_10)
        self.all_sprites_group.add(self.skin_10)

        self.skin_11 = Maps(440, 120, enemy_skin)
        self.skin11_group.add(self.skin_11)
        self.all_sprites_group.add(self.skin_11)

                    
    def logic(self):
        
        global screen_change
        global currentSkin
        global coinsNum
        global lives_num
        keys = pygame.key.get_pressed()


        screen = pygame.display.set_mode(size)



        #clock ticker
        self.clock.tick(60)
        #drawing on the splash screen
        screen.fill (BLACK)

        #loop for background animation
        if self.img1_x > -3000: 
            screen.blit(Background_skins_menu1, (self.img1_x,0))
            self.img1_x -= 10
        else:
            self.img1_x = 1000
        #second image loop
        if self.img2_x > -2000:
            screen.blit(Background_skins_menu2, (self.img2_x,0))
            self.img2_x -= 10
        else:
            self.img2_x = 2000


        
        #check collisions to change skins
        skin1_hit_list = pygame.sprite.spritecollide(self.player_1, self.skin1_group, False)
        for collision in skin1_hit_list:
            self.player_1.set_skin(blue_w_border)
            currentSkin = blue_w_border
            #make set and get function for player

        skin2_hit_list = pygame.sprite.spritecollide(self.player_1, self.skin2_group, False)
        for collision in skin2_hit_list:
            self.player_1.set_skin(purple_w_border)
            currentSkin = purple_w_border


        skin3_hit_list = pygame.sprite.spritecollide(self.player_1, self.skin3_group, False)
        for collision in skin3_hit_list:
            self.player_1.set_skin(gold_w_border)
            currentSkin = gold_w_border


        skin4_hit_list = pygame.sprite.spritecollide(self.player_1, self.skin4_group, False)
        for collision in skin4_hit_list:
            self.player_1.set_skin(creeper_skin)
            currentSkin = creeper_skin


        skin5_hit_list = pygame.sprite.spritecollide(self.player_1, self.skin5_group, False)
        for collision in skin5_hit_list:
            self.player_1.set_skin(skeleton_skin)
            currentSkin = skeleton_skin


        skin6_hit_list = pygame.sprite.spritecollide(self.player_1, self.skin6_group, False)
        for collision in skin6_hit_list:
            self.player_1.set_skin(zombie_skin)
            currentSkin = zombie_skin


        skin7_hit_list = pygame.sprite.spritecollide(self.player_1, self.skin7_group, False)
        for collision in skin7_hit_list:
            self.player_1.set_skin(therock_skin)
            currentSkin = therock_skin

        skin8_hit_list = pygame.sprite.spritecollide(self.player_1, self.skin8_group, False)
        for collision in skin8_hit_list:
            self.player_1.set_skin(kanyewest_skin)
            currentSkin = kanyewest_skin


        skin9_hit_list = pygame.sprite.spritecollide(self.player_1, self.skin9_group, False)
        for collision in skin9_hit_list:
            self.player_1.set_skin(walterwhite_skin)
            currentSkin = walterwhite_skin


        skin10_hit_list = pygame.sprite.spritecollide(self.player_1, self.skin10_group, False)
        for collision in skin10_hit_list:
            self.player_1.set_skin(spike_skin)
            currentSkin = spike_skin


        skin11_hit_list = pygame.sprite.spritecollide(self.player_1, self.skin11_group, False)
        for collision in skin11_hit_list:
            self.player_1.set_skin(enemy_skin)
            currentSkin = enemy_skin



        
        #updates moving sprites
        self.all_sprites_group.update()
        self.all_sprites_group.draw (screen)


    
        #draws title on skins menu
        screen.blit(skins_menu_title, (330, 7)) 

        #draw return to home screen message
        screen.blit(return_home_text, (760, 640))

        #draws number of coins
        coin_num = font.render(str(coinsNum), True, WHITE)
        screen.blit(coin_num, (SCREEN_W/20,23))

        #flip display to reveal new postion of objects (refreshes screen)
        pygame.display.flip()




        #check collision player and finish line
        flag_hit_list = pygame.sprite.spritecollide(self.player_1, self.finish_group, False)
        for collision in flag_hit_list:
            screen_change = 'splashscreen'

        #checks for collision player and wall
        wall_hit_list = pygame.sprite.spritecollide(self.player_1, self.wall_list, False)
        for collision in wall_hit_list:
            #sets player speed to 0
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            self.player_1.rect.x = self.player_1_old_x
            self.player_1.rect.y = self.player_1_old_y
        #resets player coordinates to last location
        self.player_1_old_x = self.player_1.rect.x
        self.player_1_old_y = self.player_1.rect.y


class Lose_Screen():
    def __init__(self):
                

        #Manages how fast screen refreshes
        self.clock = pygame.time.Clock()


    def logic(self):

        global done
        
        screen.fill (BLACK)        
        self.clock.tick(60)


        #lose function, displays message then exits game
        loop = 100
        while loop > 1:
            screen.blit(lose_txt, (230, 280))
            screen.blit(retry_text, (700, 650))
            loop -=1
        # if loop == 1:
        #     done = True
        
        pygame.display.flip()
        
        



### GAME LOOP

screen_change = 'No'

game = Splash_Screen()

while not done:
    
    #user input and controls

    game.logic()
    
    #screen changes
    if screen_change != 'No':
        if screen_change == 'lvl1':
            game = Game()
        elif screen_change == 'lvl2':
            game = Game_2()
        elif screen_change == 'lvl3':
            game = Game_3()
        elif screen_change == 'skins':
            game = Skin_Screen()
        elif screen_change == 'splashscreen':
            game = Splash_Screen()
        elif screen_change == 'losescreen':
            game = Lose_Screen()
        screen_change = 'No'
        
    


    for event in pygame.event.get():
        
        #exit game
        if event.type == pygame.QUIT:
            done = True

#endwhile - End of game loop

pygame.quit