#imports python libraries
import pygame
import math

#Initialise PyGame



#Blank Screen
SCREEN_H = 720
SCREEN_W = 960
PLAYER_HEIGHT = 40
size = (960,720)
screen = pygame.display.set_mode(size)


#Title of new window/screen
pygame.display.set_caption("Square Explore")

#Exit gae flap set to false
done = False

pygame.init()

#Global Constants

#Colours
BLACK = (0,0,0)
WHITE = (255,255,255)
BLUE = (50,50,255)
YELLOW = (255,255,0)
GOLD = (255,215,0)
RED = (255,0,0)
GREY = (150,150,150)

font = pygame.font.SysFont(None, 25)


#Icons for objects
Heart_icon = pygame.image.load('hearticon.png').convert_alpha()
Heart_icon = pygame.transform.scale(Heart_icon, (70,35))

Spikes_icon = pygame.image.load('spikeicon.png').convert_alpha()
Spikes_icon = pygame.transform.scale(Spikes_icon, (40,40))

Enemy_icon = pygame.image.load('enemyicon.png').convert_alpha()
Enemy_icon = pygame.transform.scale(Enemy_icon, (20,20))

Block_texture_level1 = pygame.image.load('blocktexturelevel1.png').convert_alpha()
Block_texture_level1 = pygame.transform.scale(Block_texture_level1, (40,40))

Background_level1 = pygame.image.load('backgroundimageL1.jpg').convert_alpha()
Background_level1 = pygame.transform.scale(Background_level1, (960,720))

Coin_icon = pygame.image.load('coinicon.png').convert_alpha()
Coin_icon = pygame.transform.scale(Coin_icon, (30,30))

Coin_icon_mini = pygame.image.load('coinicon.png').convert_alpha()
Coin_icon_mini = pygame.transform.scale(Coin_icon, (20,20))

#map list for blocks
map_1_list=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], # =24 columns, # = 18 rows
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],
            [0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0],
            [1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0],
            [1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1]]


#list of locations for static enemies
static_enemy_location_list_x = [520, 560, 520, 560, 920, 920, 360]
static_enemy_location_list_y = [560, 560, 480, 480, 560, 520, 120]

#list of locations for horizontal moving enemies
h_enemy_location_list_x = [280]
h_enemy_location_list_y = [450]

#list of locations for vertical moving enemies
v_enemy_location_list_x = []
v_enemy_location_list_y = []

#list of locations for coins
coins_location_list_x = [85, 885, 325,   5, 445]
coins_location_list_y = [85, 565, 445, 365, 125]







#CLASSES::::

# class Game():
#     __init__(self):
        



#create class for player
class Player(pygame.sprite.Sprite):
    def __init__(self, skin, player_name):
        super().__init__()
        self.color = skin
        self.name = player_name
        self.image = pygame.Surface([40,40])
        self.image.fill(skin)
        self.rect = self.image.get_rect()
        self.rect.x = 10
        self.rect.y = 680
        self.speed_x = 0
        self.speed_y = 0

    def get_x(self):
        return(Player.rect.x)

    def set_x(self, newx: int):
        Player.rect.x = newx
        
    def get_y(self):
        return(Player.rect.y)

    def set_y(self, newy: int):
        Player.rect.y = newy

    def get_speed(self):
        return(Player.speed)

    def set_speed(self, newspeed):
        Player.speed = newspeed



#create static enemy class
class Enemies(pygame.sprite.Sprite):
    def __init__(self, color, xpos, ypos):
        super().__init__()
        self.background = color
        self.image = (Spikes_icon)
        self.rect = self.image.get_rect()
        self.rect.x = xpos
        self.rect.y = ypos



#create vertical enemy class from previous enemy class
class Vertical_moving_enemies(Enemies):
    def __init__(self, color, xpos, ypos, speed, travel_ypos):
        super().__init__(color, xpos, ypos)
        self.background = color
        self.image = Enemy_icon
        self.rect = self.image.get_rect()
        self.rect.x = xpos
        self.rect.y = ypos
        self.original_y = ypos
        self.limit_y = travel_ypos
        self.enemy_speed = speed
    
#create horizontal enemy moving class
class Horizontal_moving_enemies(Enemies):
    def __init__(self, color, xpos, ypos, speed, travel_xpos):
        super().__init__(color, xpos, ypos)
        self.background = color
        self.image = Enemy_icon
        self.rect = self.image.get_rect()
        self.rect.x = xpos
        self.rect.y = ypos
        self.original_x = xpos
        self.limit_x = travel_xpos
        self.enemy_speed = speed
        


#class to show lives
class Lives(pygame.sprite.Sprite):
    def __init__(self, x_ref, y_ref):
        super().__init__()
        self.image = Heart_icon
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref


#map class
class Maps(pygame.sprite.Sprite):
    def __init__(self, x_ref, y_ref):
        super().__init__()
        self.image = Block_texture_level1
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref


#CREATE COIN CLASS
class Coins(pygame.sprite.Sprite):
    def __init__(self, x_ref, y_ref):
        super().__init__()
        self.image = Coin_icon
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref


#CREATE COIN COUNT CLASS
class Coins_display(pygame.sprite.Sprite):
    def __init__(self, x_ref, y_ref):
        super().__init__()
        self.image = Coin_icon_mini
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref
        


#class for the finish flag on levels
class Finish_Flag(pygame.sprite.Sprite):
    def __init__(self, color, width, height, x_ref, y_ref):
        super().__init__()
        self.image = pygame.Surface([width,height])
        self.image.fill(color)
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref

class Game():
    def __init__(self):
        #Manages how fast screen refreshes
        self.clock = pygame.time.Clock()

        #create group of background images
        self.background_group = pygame.sprite.Group()

        #creates a group of player(s)
        self.player_group = pygame.sprite.Group()

        #create group of enemies
        self.enemies_group = pygame.sprite.Group()

        #create finish flag group
        self.finish_group = pygame.sprite.Group()

        #create group of lives
        self.lives_list = pygame.sprite.Group()

        #create list of coins
        self.coins_group = pygame.sprite.Group()

        #create display of number of coins
        self.coin_display_list = pygame.sprite.Group()

        #create a list for the map walls
        self.wall_list = pygame.sprite.Group()

        #create a list of all sprites
        self.all_sprites_group = pygame.sprite.Group()
        
        #create player 1
        self.player_1 = Player(BLUE, "Player 1")
        self.player_group.add(self.player_1)
        self.all_sprites_group.add(self.player_1)        
        self.init_map()

        self.coin_num  = 0

        self.num_lives = 5

        #create still enemies
        for i in range(len(static_enemy_location_list_x)):
            static_enemy = Enemies(RED, static_enemy_location_list_x[i], static_enemy_location_list_y[i])
            #add enemies into sprite groups
            self.enemies_group.add(static_enemy)
            self.all_sprites_group.add(static_enemy)


        #create enemies which move vertically
        for i in range(len(v_enemy_location_list_x)):
            moving_enemy = Vertical_moving_enemies(GREY, v_enemy_location_list_x[i], v_enemy_location_list_y[i], 1, 550)
            self.enemies_group.add(moving_enemy)
            self.all_sprites_group.add(moving_enemy)

        #create enemies which move horizontally
        for i in range(len(h_enemy_location_list_x)):
            moving_enemy = Horizontal_moving_enemies(GREY, h_enemy_location_list_x[i], h_enemy_location_list_y[i], 1, 550)
            self.enemies_group.add(moving_enemy)
            self.all_sprites_group.add(moving_enemy)


        #create finish flag object
        finish = Finish_Flag(GOLD, 40, 80, 900, 40)
        self.finish_group.add(finish)
        self.all_sprites_group.add(finish)

        #create lives object
        
        for x in range(self.num_lives):
            for z in range(700, 730 +(x*30), 30):
                heart = Lives(z, 5)
                self.lives_list.add(heart)
                self.all_sprites_group.add(heart)

        #create coin objects
        for i in range(len(coins_location_list_x)):
            coin = Coins(coins_location_list_x[i], coins_location_list_y[i])
            self.coins_group.add(coin)
            self.all_sprites_group.add(coin)

        #create display of coin count
        coin_count = Coins_display(20, 20)
        self.coin_display_list.add(coin_count)
        self.all_sprites_group.add(coin_count)



    def init_map(self):
        #create map
        for y in range(18):
            for x in range(24):
                if map_1_list[y][x] == 1:
                    my_wall = Maps(x*40, y*40)
                    self.wall_list.add(my_wall)
                    self.all_sprites_group.add(my_wall)


    def logic(self):

        pass


    def draw(self):
        screen.fill (BLACK)
    
        self.all_sprites_group.update()
        #screen.blit(Background_level1,(0,0))
        self.all_sprites_group.draw (screen)

        coin_num = font.render(str(self.coin_num), True, WHITE)
        screen.blit(coin_num, (50,23))
        
        #draw here

        #flip display to reveal new postion of objects (refreshes screen)
        pygame.display.flip()
        #clock ticks over
        self.clock.tick(60)

    def handle_event_and_collision(self):
        keys = pygame.key.get_pressed()
       
        #player movement keys
        
        if event.type == pygame.KEYDOWN:

            

            if keys[pygame.K_LEFT]:
                self.player_1.speed_x = -5
            elif keys[pygame.K_RIGHT]:
                self.player_1.speed_x = 5
            elif keys[pygame.K_UP]:
                    self.player_1.speed_y = -5
        elif event.type == pygame.KEYUP:
                self.player_1.speed_y = 2
                self.player_1.speed_x = 0

                
                                         
        if (self.player_1.rect.x >= 0) and (self.player_1.rect.x <= SCREEN_W - PLAYER_HEIGHT):
            self.player_1.rect.x += self.player_1.speed_x
        elif (self.player_1.rect.x < 0):
            self.player_1.rect.x = 0
        elif (self.player_1.rect.x > SCREEN_W - PLAYER_HEIGHT):
            self.player_1.rect.x = (SCREEN_W - PLAYER_HEIGHT)

        if (self.player_1.rect.y <= SCREEN_H - PLAYER_HEIGHT):
            self.player_1.rect.y += self.player_1.speed_y
        elif (self.player_1.rect.y > SCREEN_H - PLAYER_HEIGHT):
            self.player_1.rect.y = SCREEN_H - PLAYER_HEIGHT
            self.player_1.speed_y = 0
            



        

    def handle_collisions(self):
        #Game logic goes after this comment
        wall_hit_list = pygame.sprite.spritecollide(self.player_1, self.wall_list, False)
        for collision in wall_hit_list:
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            self.player_1.rect.x = self.player_1_old_x
            self.player_1.rect.y = self.player_1_old_y
        
        self.player_1_old_x = self.player_1.rect.x
        self.player_1_old_y = self.player_1.rect.y

        
        s_enemy_hit_list = pygame.sprite.spritecollide(self.player_1, self.enemies_group, False)
        for collision in s_enemy_hit_list:
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            self.player_1.rect.x = 10
            self.player_1.rect.y = 680
            # self.num_lives = self.num_lives - 1



        coin_hit_list = pygame.sprite.spritecollide(self.player_1, self.coins_group, True)
        for collision in coin_hit_list:
            self.coin_num = self.coin_num + 1
            
        

        flag_hit_list = pygame.sprite.spritecollide(self.player_1, self.finish_group, False)
        for collision in flag_hit_list:
            self.coin_num = self.coin_num + 5
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            self.player_1.rect.x = 10
            self.player_1.rect.y = 680
        
        self.draw()



    # def run(self):
    #     self.__init__()
    #     self.init_map()
    #     self.logic()
    #     self.handle_event_and_collision()
    #     self.handle_collisions()
        


### GAME LOOP

game = Game()

while not done:

    #user input and controls
  
    for event in pygame.event.get():
        
        
        if event.type == pygame.QUIT:
            done = True
        
    
    #Game logic goes after this comment
    game.draw()
    game.logic()
    game.handle_event_and_collision()
    game.handle_collisions()

    # game.run()
    #screen background is BLACK
    # screen.fill (BLACK)
    
    # all_sprites_group.update()
    # #screen.blit(Background_level1,(0,0))
    # all_sprites_group.draw (screen)
       
    # #draw here

    # #flip display to reveal new postion of objects (refreshes screen)
    # pygame.display.flip()
    # #clock ticks over
    # clock.tick(60)

#endwhile - End of game loop

pygame.quit