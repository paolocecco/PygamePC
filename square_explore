#imports python libraries
import pygame
import math
import pygame_menu

#Initialise PyGame



#Blank Screen
SCREEN_H = 720
SCREEN_W = 960
PLAYER_HEIGHT = 40
size = (960,720)
screen = pygame.display.set_mode(size)




#Title of new window/screen
pygame.display.set_caption("Square Explore")

#Exit gae flap set to false
done = False

pygame.init()

#Global Constants

#Colours
BLACK = (0,0,0)
WHITE = (255,255,255)
BLUE = (50,50,255)
YELLOW = (255,255,0)
GOLD = (255,215,0)
RED = (255,0,0)
GREY = (150,150,150)

#player skins
blue_w_border = pygame.image.load('blue_w_border.png').convert_alpha()
blue_w_border = pygame.transform.scale(blue_w_border, (40,40))




font = pygame.font.SysFont(None, 25)
l_c_m_font = pygame.font.SysFont(None, 50)
title_font = pygame.font.SysFont('malgungothic', 100)

lvl_txt_font = pygame.font.SysFont('malgungothic', 30)
lvl_title_font = pygame.font.SysFont('malgungothic', 30, bold=True)

help_txt_font = pygame.font.SysFont('malgungothic', 12)

#level titles splash screen creation
lvl1_txt = lvl_txt_font.render('LEVEL 1', True, WHITE)
lvl2_txt = lvl_txt_font.render('LEVEL 2', True, WHITE)
lvl3_txt = lvl_txt_font.render('LEVEL 3', True, WHITE)

skinsshop_txt = lvl_txt_font.render('SKINS', True, WHITE)

#tutorial texts
help_txt = help_txt_font.render('press ^ arrow under level to start game', True, WHITE)

#screen title texts
ms_game_title = title_font.render('SQUARE EXPLORE', True, BLUE)

lvl1_title = lvl_title_font.render('LEVEL 1', True, BLUE)
lvl2_title = lvl_title_font.render('LEVEL 2', True, BLUE)
lvl3_title = lvl_title_font.render('LEVEL 3', True, BLUE)



#Icons for objects
Heart_icon = pygame.image.load('hearticon.png').convert_alpha()
Heart_icon = pygame.transform.scale(Heart_icon, (70,35))

Spikes_icon = pygame.image.load('spikeicon.png').convert_alpha()
Spikes_icon = pygame.transform.scale(Spikes_icon, (40,40))

Enemy_icon = pygame.image.load('enemyicon.png').convert_alpha()
Enemy_icon = pygame.transform.scale(Enemy_icon, (20,20))

Block_texture_level1 = pygame.image.load('blocktexturelevel1.png').convert_alpha()
Block_texture_level1 = pygame.transform.scale(Block_texture_level1, (40,40))

Background_level1 = pygame.image.load('backgroundimageL1.jpg').convert_alpha()
Background_level1 = pygame.transform.scale(Background_level1, (960,720))

Coin_icon = pygame.image.load('coinicon.png').convert_alpha()
Coin_icon = pygame.transform.scale(Coin_icon, (30,30))

Coin_icon_mini = pygame.image.load('coinicon.png').convert_alpha()
Coin_icon_mini = pygame.transform.scale(Coin_icon, (20,20))

s_s_lvl1g = pygame.image.load('lvl1ssgradient.png').convert_alpha()
s_s_lvl1g = pygame.transform.scale(s_s_lvl1g, (250,720))

s_s_lvl2g = pygame.image.load('lvl2ssgradient.png').convert_alpha()
s_s_lvl2g = pygame.transform.scale(s_s_lvl2g, (250,720))

s_s_lvl3g = pygame.image.load('lvl3ssgradient.png').convert_alpha()
s_s_lvl3g = pygame.transform.scale(s_s_lvl3g, (250,720))

s_s_skinsg = pygame.image.load('skinssgradient.png').convert_alpha()
s_s_skinsg = pygame.transform.scale(s_s_skinsg, (160,720))



#map list for blocks
splash_screen_list =[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], # =24 columns, # = 18 rows
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]


map_1_list=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], # =24 columns, # = 18 rows
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],
            [0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0],
            [1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0],
            [1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1]]


map_2_list =[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], # =24 columns, # = 18 rows
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]



#list of locations for static enemies
static_enemy_location_list_x = [520, 560, 520, 560, 920, 920, 360]
static_enemy_location_list_y = [560, 560, 480, 480, 560, 520, 120]

#list of locations for horizontal moving enemies
h_enemy_location_list_x = [280]
h_enemy_location_list_y = [450]

#list of locations for vertical moving enemies
v_enemy_location_list_x = [680]
v_enemy_location_list_y = [20]

#list of locations for coins
coins_location_list_x = [85, 885, 325,   5, 445]
coins_location_list_y = [85, 565, 445, 365, 125]

LIVES_NUM = 5

COINS_NUM = 0









#CLASSES::::

# class Game():
#     __init__(self):
        



#create class for player
class Player(pygame.sprite.Sprite):
    def __init__(self, skin, player_name):
        super().__init__()
        self.skins = skin
        self.name = player_name
        self.image = skin
        #pygame.Surface([40,40])
        #self.image.fill(skin)
        self.rect = self.image.get_rect()
        self.rect.x = 10
        self.rect.y = 680
        self.speed_x = 0
        self.speed_y = 0
        self.isJump = False
        self.vel = 5
        self.jumpCount = 8
        




    def update(self):
        global screen_change

        keys = pygame.key.get_pressed()


        self.speed_y += 0.75
        if self.rect.y > SCREEN_H and self.speed_y >= 0:
            self.speed_y = 0


        if keys[pygame.K_1]:
            screen_change = 'lvl1'

        if keys[pygame.K_LEFT] and self.rect.x > self.vel: 
            self.rect.x -= self.vel
        #records right key presses
        if keys[pygame.K_RIGHT] and self.rect.x < SCREEN_W - self.vel - PLAYER_HEIGHT:  
            self.rect.x += self.vel
        #the jumping loop
        if not(self.isJump): #checks if attribute 'isJump' is false, making sure the player is not already jumping

            if keys[pygame.K_DOWN] and self.rect.y < SCREEN_H - PLAYER_HEIGHT - self.vel:
                self.rect.y += self.vel
            #if the UP key is pressed, isJump is set to true, and the player begins the jump
            if keys[pygame.K_UP]:
                self.isJump = True
        else: #where the jump happens
            if self.jumpCount >= -9: #quadratic path
                self.rect.y -= (self.jumpCount * abs(self.jumpCount)) * 0.35 #changing of the y coordinate of the player
                self.jumpCount -= 0.3
            else: 
                self.jumpCount = 8
                self.isJump = False # resets isJump to False so the player can't jump again

        

        #checks player is within boundaries                                 
        if (self.rect.x >= 0) and (self.rect.x <= SCREEN_W - PLAYER_HEIGHT):
            #adds speed value to coordinate
            self.rect.x += self.speed_x
        elif (self.rect.x < 0):
            #else keeps player within boundaries
            self.rect.x = 0
        elif (self.rect.x > SCREEN_W - PLAYER_HEIGHT):
            self.rect.x = (SCREEN_W - PLAYER_HEIGHT)
        #checks y boundaries
        if (self.rect.y <= SCREEN_H - PLAYER_HEIGHT):
            self.rect.y += self.speed_y
        elif (self.rect.y > SCREEN_H - PLAYER_HEIGHT):
            self.rect.y = SCREEN_H - PLAYER_HEIGHT
            self.speed_y = 0
        



#create static enemy class
class Enemies(pygame.sprite.Sprite):
    def __init__(self, color, xpos, ypos):
        super().__init__()
        self.background = color
        self.image = (Spikes_icon)
        self.rect = self.image.get_rect()
        self.rect.x = xpos
        self.rect.y = ypos



#create vertical enemy class from previous enemy class
class Vertical_moving_enemies(Enemies):
    def __init__(self, color, xpos, ypos, speed, travel_ypos):
        super().__init__(color, xpos, ypos)
        self.background = color
        self.image = Enemy_icon
        self.rect = self.image.get_rect()
        self.rect.x = xpos
        self.rect.y = ypos
        self.original_y = ypos
        self.limit_y = travel_ypos
        self.enemy_speed = speed

        self.speed_y = 0


    def update(self):
        for i in range(len(v_enemy_location_list_x)):
            if self.rect.y == (v_enemy_location_list_y[i]):
                self.enemy_speed = 1
            if self.rect.y == (v_enemy_location_list_y[i] + 80):
                self.enemy_speed = -1

        
        self.rect.y += self.enemy_speed
    
#create horizontal enemy moving class
class Horizontal_moving_enemies(Enemies):
    def __init__(self, color, xpos, ypos, speed, travel_xpos):
        super().__init__(color, xpos, ypos)
        self.background = color
        self.image = Enemy_icon
        self.rect = self.image.get_rect()
        self.rect.x = xpos
        self.rect.y = ypos
        self.original_x = xpos
        self.limit_x = travel_xpos
        self.enemy_speed = speed

        self.speed_x = 0

    def update(self):
        for i in range(len(h_enemy_location_list_x)):
            if self.rect.x == (h_enemy_location_list_y[i] - 220):
                self.enemy_speed = 1
            if self.rect.x == (h_enemy_location_list_y[i] - 120):
                self.enemy_speed = -1

        
        self.rect.x += self.enemy_speed


#class to show lives
class Lives(pygame.sprite.Sprite):
    def __init__(self, x_ref, y_ref):
        super().__init__()
        self.image = Heart_icon
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref
        


#map class
class Maps(pygame.sprite.Sprite):
    def __init__(self, x_ref, y_ref):
        super().__init__()
        self.image = Block_texture_level1
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref


#CREATE COIN CLASS
class Coins(pygame.sprite.Sprite):
    def __init__(self, x_ref, y_ref):
        super().__init__()
        self.image = Coin_icon
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref
        

#CREATE COIN COUNT CLASS
class Coins_display(pygame.sprite.Sprite):
    def __init__(self, x_ref, y_ref):
        super().__init__()
        self.image = Coin_icon_mini
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref
        


#class for the finish flag on levels
class Finish_Flag(pygame.sprite.Sprite):
    def __init__(self, color, width, height, x_ref, y_ref):
        super().__init__()
        self.image = pygame.Surface([width,height])
        self.image.fill(color)
        self.rect = self.image.get_rect()
        self.rect.x = x_ref
        self.rect.y = y_ref



#class for splash screen
class Splash_Screen():
    def __init__(self):

        
        #Manages how fast screen refreshes
        self.clock = pygame.time.Clock()

        #create group of background images
        self.background_group = pygame.sprite.Group()

        #creates a group of player(s)
        self.player_group = pygame.sprite.Group()

        #create group of enemies
        self.enemies_group = pygame.sprite.Group()

        #create group of lives
        self.lives_list = pygame.sprite.Group()

        #create display of number of coins
        self.coin_display_list = pygame.sprite.Group()

        #create a list for the map walls
        self.wall_list = pygame.sprite.Group()

        #create a list of all sprites
        self.all_sprites_group = pygame.sprite.Group()
        
        #create player 1
        self.player_1 = Player(blue_w_border, "Player 1")
        self.player_group.add(self.player_1)
        self.all_sprites_group.add(self.player_1)        

        self.num_lives = LIVES_NUM

        self.coin_num  = COINS_NUM
        

        #create lives object
        
        for x in range(self.num_lives):
            for z in range(700, 730 +(x*30), 30):
                heart = Lives(z, 5)
                self.lives_list.add(heart)
                self.all_sprites_group.add(heart)


        #create display of coin count
        coin_count = Coins_display(20, 20)
        self.coin_display_list.add(coin_count)
        self.all_sprites_group.add(coin_count)



    # def init_map(self):


        # #create map

        # for y in range(18):
        #     for x in range(24):
        #         if splash_screen_list[y][x] == 1:
        #             my_wall = Maps(x*40, y*40)
        #             self.wall_list.add(my_wall)
        #             self.all_sprites_group.add(my_wall)

                    
    def logic(self):
        
        global screen_change


        keys = pygame.key.get_pressed()


        



    # def draw(self):


        #clock ticker
        self.clock.tick(60)
        #drawing on the splash screen
        screen.fill (BLACK)

        #draw areas on the home screen to different levels
        screen.blit(s_s_lvl1g, (50,0))
        screen.blit(s_s_lvl2g, (300,0))
        screen.blit(s_s_lvl3g, (550,0))
        screen.blit(s_s_skinsg, (800,0))

        #level number blitting
        screen.blit(lvl1_txt, (125, 80))
        screen.blit(lvl2_txt, (375, 80))
        screen.blit(lvl3_txt, (625, 80))

        screen.blit(skinsshop_txt, (835, 80))


        #changing levels based on area on splash screen
        if self.player_1.rect.x > 50 and self.player_1.rect.x < 300:
            #blits help message in the level area if within the area
            screen.blit(help_txt, (65, 40))
            if keys[pygame.K_UP]:
                screen_change = 'lvl1'
                
        
        if self.player_1.rect.x > 300 and self.player_1.rect.x < 550:
            #blits help message in the level area if within the area
            screen.blit(help_txt, (315, 40))
            if keys[pygame.K_UP]:
                screen_change = 'lvl2'

        if self.player_1.rect.x > 550 and self.player_1.rect.x < 800:
            #blits help message in the level area if within the area
            screen.blit(help_txt, (565, 40))
            if keys[pygame.K_UP]:
                screen_change = 'lvl3'

        

        #updates moving sprites
        self.all_sprites_group.update()
        self.all_sprites_group.draw (screen)


        

        #draws title on splash screen
        screen.blit(ms_game_title, (SCREEN_W/15, 300)) 

        #draws number of coins
        coin_num = font.render(str(self.coin_num), True, WHITE)
        screen.blit(coin_num, (SCREEN_W/20,23))

        #flip display to reveal new postion of objects (refreshes screen)
        pygame.display.flip()
        


        
                




    # def handle_collisions(self):
        #checks for collision player and wall
        # wall_hit_list = pygame.sprite.spritecollide(self.player_1, self.wall_list, False)
        # for collision in wall_hit_list:
        #     #sets player speed to 0
        #     #self.player_1.speed_x = 0
        #     self.player_1.speed_y = 0
        #     self.player_1.rect.x = self.player_1_old_x
        #     self.player_1.rect.y = self.player_1_old_y
            
        #     screen_change = 'lvl1'
        # #resets player coordinates to last location
        # self.player_1_old_x = self.player_1.rect.x
        # self.player_1_old_y = self.player_1.rect.y
        



#level 1 class
class Game():
    def __init__(self):
        
        self.level_complete = 0

        self.isJump = False
        self.jumpCount = 8
        self.vel = 5

        

        #Manages how fast screen refreshes
        self.clock = pygame.time.Clock()

        #create group of background images
        self.background_group = pygame.sprite.Group()

        #creates a group of player(s)
        self.player_group = pygame.sprite.Group()

        #create moving enemies groups
        self.v_enemies_group = pygame.sprite.Group()

        self.h_enemies_group = pygame.sprite.Group()

        #create group of enemies
        self.enemies_group = pygame.sprite.Group()

        #create finish flag group
        self.finish_group = pygame.sprite.Group()

        #create group of lives
        self.lives_list = pygame.sprite.Group()

        #create list of coins
        self.coins_group = pygame.sprite.Group()

        #create display of number of coins
        self.coin_display_list = pygame.sprite.Group()

        #create a list for the map walls
        self.wall_list = pygame.sprite.Group()

        #create a list of all sprites
        self.all_sprites_group = pygame.sprite.Group()
        
        #create player 1
        self.player_1 = Player(blue_w_border, "Player 1")
        self.player_group.add(self.player_1)
        self.all_sprites_group.add(self.player_1)        

        self.num_lives = LIVES_NUM

        self.coin_num  = COINS_NUM


        #create still enemies
        for i in range(len(static_enemy_location_list_x)):
            static_enemy = Enemies(RED, static_enemy_location_list_x[i], static_enemy_location_list_y[i])
            #add enemies into sprite groups
            self.enemies_group.add(static_enemy)
            self.all_sprites_group.add(static_enemy)


        #create enemies which move vertically
        for i in range(len(v_enemy_location_list_x)):
            self.v_moving_enemy = Vertical_moving_enemies(GREY, v_enemy_location_list_x[i], v_enemy_location_list_y[i], 2, 550)
            self.v_enemies_group.add(self.v_moving_enemy)
            self.enemies_group.add(self.v_moving_enemy)
            self.all_sprites_group.add(self.v_moving_enemy)

        #create enemies which move horizontally
        for i in range(len(h_enemy_location_list_x)):
            self.h_moving_enemy = Horizontal_moving_enemies(GREY, h_enemy_location_list_x[i], h_enemy_location_list_y[i], 2, 550)
            self.h_enemies_group.add(self.h_moving_enemy)
            self.enemies_group.add(self.h_moving_enemy)
            self.all_sprites_group.add(self.h_moving_enemy)


        #create finish flag object
        finish = Finish_Flag(GOLD, 40, 80, 900, 40)
        self.finish_group.add(finish)
        self.all_sprites_group.add(finish)

        #create lives object
        
        for x in range(self.num_lives):
            for z in range(700, 730 +(x*30), 30):
                heart = Lives(z, 5)
                self.lives_list.add(heart)
                self.all_sprites_group.add(heart)

        #create coin objects
        for i in range(len(coins_location_list_x)):
            coin = Coins(coins_location_list_x[i], coins_location_list_y[i])
            self.coins_group.add(coin)
            self.all_sprites_group.add(coin)

        #create display of coin count
        coin_count = Coins_display(20, 20)
        self.coin_display_list.add(coin_count)
        self.all_sprites_group.add(coin_count)

         


    #  init_map
        #create map

        for y in range(18):
            for x in range(24):
                if map_1_list[y][x] == 1:
                    my_wall = Maps(x*40, y*40)
                    self.wall_list.add(my_wall)
                    self.all_sprites_group.add(my_wall)


    def logic(self):
        global screen_change

        keys = pygame.key.get_pressed()
        if keys[pygame.K_0]:
            screen_change = 'splashscreen'

    #  drawing and updating sprites
        screen.fill (BLACK)        
        self.clock.tick(60)
        screen.blit(Background_level1, (0,0))

        screen.blit(lvl1_title, (420, 30))

        self.all_sprites_group.update()
        self.all_sprites_group.draw (screen)

        coin_num = font.render(str(self.coin_num), True, WHITE)
        screen.blit(coin_num, (SCREEN_W/20,23))
        
        self.level_complete_mesg = l_c_m_font.render("LEVEL COMPLETE", True, WHITE) #create level complete font
        if self.level_complete > 0:
            screen.blit(self.level_complete_mesg, (SCREEN_W/3,340)) #blits message onto screen
            self.level_complete -= 1 #creates short time for it to be shown
        #draw here

        



        #flip display to reveal new postion of objects (refreshes screen)
        pygame.display.flip()
        #clock ticks over
        



        
            



        

    # def handle_collisions(self):
        #self.collision_types = {'top': False, 'bottom': False, 'right': False, 'left': False}
        #checks for collision player and wall
        wall_hit_list = pygame.sprite.spritecollide(self.player_1, self.wall_list, False)
        for collision in wall_hit_list:
            #sets player speed to 0
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            self.player_1.rect.x = self.player_1_old_x
            self.player_1.rect.y = self.player_1_old_y
        #resets player coordinates to last location
        self.player_1_old_x = self.player_1.rect.x
        self.player_1_old_y = self.player_1.rect.y

        
        #checks collisions player and static and moving enemies
        s_enemy_hit_list = pygame.sprite.spritecollide(self.player_1, self.enemies_group, False)
        for collision in s_enemy_hit_list:
            #sets player speed to 0
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            #resets coordinates to startic coordinate
            self.player_1.rect.x = 10
            self.player_1.rect.y = 680
            print(self.num_lives)
            #takes away a life
            self.num_lives = self.num_lives - 1

            print(self.num_lives)

        
        #check collision player and coin
        coin_hit_list = pygame.sprite.spritecollide(self.player_1, self.coins_group, True)
        for collision in coin_hit_list:
            #adds one to coin coint
            self.coin_num = self.coin_num + 1
            
        
        #check collision player and finish line
        flag_hit_list = pygame.sprite.spritecollide(self.player_1, self.finish_group, False)
        for collision in flag_hit_list:
            #adds 5 to coin count
            self.coin_num = self.coin_num + 5
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            #resets player to start coordinates
            self.player_1.rect.x = 10
            self.player_1.rect.y = 680
            #sets the timer variable for displaying level complete message
            self.level_complete = 500
            screen_change = 'splashscreen'



#level 2 class
class Game_2():
    def __init__(self):
        
        self.level_complete = 0

        self.isJump = False
        self.jumpCount = 8
        self.vel = 5

        

        #Manages how fast screen refreshes
        self.clock = pygame.time.Clock()

        #create group of background images
        self.background_group = pygame.sprite.Group()

        #creates a group of player(s)
        self.player_group = pygame.sprite.Group()

        #create moving enemies groups
        self.v_enemies_group = pygame.sprite.Group()

        self.h_enemies_group = pygame.sprite.Group()

        #create group of enemies
        self.enemies_group = pygame.sprite.Group()

        #create finish flag group
        self.finish_group = pygame.sprite.Group()

        #create group of lives
        self.lives_list = pygame.sprite.Group()

        #create list of coins
        self.coins_group = pygame.sprite.Group()

        #create display of number of coins
        self.coin_display_list = pygame.sprite.Group()

        #create a list for the map walls
        self.wall_list = pygame.sprite.Group()

        #create a list of all sprites
        self.all_sprites_group = pygame.sprite.Group()
        
        #create player 1
        self.player_1 = Player(blue_w_border, "Player 1")
        self.player_group.add(self.player_1)
        self.all_sprites_group.add(self.player_1)        

        self.num_lives = LIVES_NUM

        self.coin_num  = COINS_NUM


        #create still enemies
        for i in range(len(static_enemy_location_list_x)):
            static_enemy = Enemies(RED, static_enemy_location_list_x[i], static_enemy_location_list_y[i])
            #add enemies into sprite groups
            self.enemies_group.add(static_enemy)
            self.all_sprites_group.add(static_enemy)


        #create enemies which move vertically
        for i in range(len(v_enemy_location_list_x)):
            self.v_moving_enemy = Vertical_moving_enemies(GREY, v_enemy_location_list_x[i], v_enemy_location_list_y[i], 2, 550)
            self.v_enemies_group.add(self.v_moving_enemy)
            self.enemies_group.add(self.v_moving_enemy)
            self.all_sprites_group.add(self.v_moving_enemy)

        #create enemies which move horizontally
        for i in range(len(h_enemy_location_list_x)):
            self.h_moving_enemy = Horizontal_moving_enemies(GREY, h_enemy_location_list_x[i], h_enemy_location_list_y[i], 2, 550)
            self.h_enemies_group.add(self.h_moving_enemy)
            self.enemies_group.add(self.h_moving_enemy)
            self.all_sprites_group.add(self.h_moving_enemy)


        #create finish flag object
        finish = Finish_Flag(GOLD, 40, 80, 900, 40)
        self.finish_group.add(finish)
        self.all_sprites_group.add(finish)

        #create lives object
        
        for x in range(self.num_lives):
            for z in range(700, 730 +(x*30), 30):
                heart = Lives(z, 5)
                self.lives_list.add(heart)
                self.all_sprites_group.add(heart)

        #create coin objects
        for i in range(len(coins_location_list_x)):
            coin = Coins(coins_location_list_x[i], coins_location_list_y[i])
            self.coins_group.add(coin)
            self.all_sprites_group.add(coin)

        #create display of coin count
        coin_count = Coins_display(20, 20)
        self.coin_display_list.add(coin_count)
        self.all_sprites_group.add(coin_count)

         


    #  init_map
        #create map

        for y in range(18):
            for x in range(24):
                if map_1_list[y][x] == 1:
                    my_wall = Maps(x*40, y*40)
                    self.wall_list.add(my_wall)
                    self.all_sprites_group.add(my_wall)


    def logic(self):
        global screen_change

        keys = pygame.key.get_pressed()
        if keys[pygame.K_0]:
            screen_change = 'splashscreen'

    #  drawing and updating sprites
        screen.fill (BLACK)        
        self.clock.tick(60)
        screen.blit(Background_level1, (0,0))
        self.all_sprites_group.update()
        self.all_sprites_group.draw (screen)

        coin_num = font.render(str(self.coin_num), True, WHITE)
        screen.blit(coin_num, (SCREEN_W/20,23))
        
        self.level_complete_mesg = l_c_m_font.render("LEVEL COMPLETE", True, WHITE) #create level complete font
        if self.level_complete > 0:
            screen.blit(self.level_complete_mesg, (SCREEN_W/3,340)) #blits message onto screen
            self.level_complete -= 1 #creates short time for it to be shown
        #draw here

        



        #flip display to reveal new postion of objects (refreshes screen)
        pygame.display.flip()
        #clock ticks over
        



        
            



        

    # def handle_collisions(self):
        #self.collision_types = {'top': False, 'bottom': False, 'right': False, 'left': False}
        #checks for collision player and wall
        wall_hit_list = pygame.sprite.spritecollide(self.player_1, self.wall_list, False)
        for collision in wall_hit_list:
            #sets player speed to 0
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            self.player_1.rect.x = self.player_1_old_x
            self.player_1.rect.y = self.player_1_old_y
        #resets player coordinates to last location
        self.player_1_old_x = self.player_1.rect.x
        self.player_1_old_y = self.player_1.rect.y

        
        #checks collisions player and static and moving enemies
        s_enemy_hit_list = pygame.sprite.spritecollide(self.player_1, self.enemies_group, False)
        for collision in s_enemy_hit_list:
            #sets player speed to 0
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            #resets coordinates to startic coordinate
            self.player_1.rect.x = 10
            self.player_1.rect.y = 680
            print(self.num_lives)
            #takes away a life
            self.num_lives = self.num_lives - 1

            print(self.num_lives)

        
        #check collision player and coin
        coin_hit_list = pygame.sprite.spritecollide(self.player_1, self.coins_group, True)
        for collision in coin_hit_list:
            #adds one to coin coint
            self.coin_num = self.coin_num + 1
            
        
        #check collision player and finish line
        flag_hit_list = pygame.sprite.spritecollide(self.player_1, self.finish_group, False)
        for collision in flag_hit_list:
            #adds 5 to coin count
            self.coin_num = self.coin_num + 5
            self.player_1.speed_x = 0
            self.player_1.speed_y = 0
            #resets player to start coordinates
            self.player_1.rect.x = 10
            self.player_1.rect.y = 680
            #sets the timer variable for displaying level complete message
            self.level_complete = 500
            screen_change = 'splashscreen'



        
        
# menu = pygame_menu.Menu('Welcome', 400, 300,
#                        theme=pygame_menu.themes.THEME_BLUE)
        
# menu.add.button('Start', game.run())




screen_change = 'No'

### GAME LOOP

game = Splash_Screen()


while not done:

    #user input and controls
    #game.draw()
    # game.handle_event()
    # game.handle_collisions()

    game.logic()
    
    if screen_change != 'No':
        if screen_change == 'lvl1':
            game = Game()
        elif screen_change == 'lvl2':
            game = Game_2()
        elif screen_change == 'splashscreen':
            game = Splash_Screen()
        screen_change = 'No'
        
        

    for event in pygame.event.get():
        
        
        if event.type == pygame.QUIT:
            done = True
        
       

        
    
    #Game logic goes after this comment
    

    #game.run()
    #screen background is BLACK
    # screen.fill (BLACK)

       
    # #draw here

    # #flip display to reveal new postion of objects (refreshes screen)
    # pygame.display.flip()
    # #clock ticks over
    # clock.tick(60)

#endwhile - End of game loop

pygame.quit